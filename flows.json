[
    {
        "id": "e55eac88.70105",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "16ac6319.1ce66d",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f498ccd7.816528",
        "type": "function",
        "z": "e55eac88.70105",
        "name": "create contract object",
        "func": "// const marketAbi = global.get(\"market_abi\").abi;\n// const mnemonic = \"sort evoke such rally kid alone month judge govern cool bargain snow\";\n// const httpProvider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/9044c31baf1f4758a2aaa099b32d3443\");\n// const provider = new Web3HDWalletProvider(mnemonic, httpProvider);\n// const user = \"0xdb78e4750fc81ea444f90714e1618a989886adca\";\n// console.log(provider.getAddress())\n// msg.address = provider.getAddress()\n\n\n// return msg;",
        "func": "const ethers = global.get(\"ethers\")\nconst address = \"0x86eb2315cec58974f7c13b0b36e5c700a64df551\"\n// const abi = [\n//     \"event Buy(address indexed buyer, uint indexed filedId)\",\n//     \"function priceLimit() public view returns (uint)\",\n//     \"function Files(uint filedId) public view returns (tuple(address seller, address paymentAsset, string hash, string description, string orbitDb, uint price, uint numRetriveals) file)\"\n// ];\nconst abi = global.get(\"market_abi\").abi\nconst provider = await ethers.getDefaultProvider( 4 , {infura: \"9044c31baf1f4758a2aaa099b32d3443\"} )\nconst privateKey = \"0xADD53F9A7E588D003326D1CBF9E4A43C061AADD9BC938C843A79E7B4FD2AD743\";\nconst wallet = new ethers.Wallet(privateKey, provider);\nconst contract = new ethers.Contract(address, abi, provider);\n\nmsg.contract = contract\nmsg.payload = abi\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 40,
        "wires": [[]]
    },
    {
        "id": "432fe0cc.8ecab8",
        "type": "inject",
        "z": "e55eac88.70105",
        "name": "Set global config",
        "props": [
            {
                "p": "infuraID",
                "v": "9044c31baf1f4758a2aaa099b32d3443",
                "vt": "str"
            },
            {
                "p": "contractAddress",
                "v": "0x86eb2315cec58974f7c13b0b36e5c700a64df551",
                "vt": "str"
            },
            {
                "p": "privateKey",
                "v": "0xADD53F9A7E588D003326D1CBF9E4A43C061AADD9BC938C843A79E7B4FD2AD743",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "x": 170,
        "y": 60,
        "wires": [["147b4e06.43cf32"]]
    },
    {
        "id": "267b2cf7.e997b4",
        "type": "change",
        "z": "e55eac88.70105",
        "name": "set space & box",
        "rules": [
            {
                "t": "set",
                "p": "space",
                "pt": "global",
                "to": "space",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "box",
                "pt": "global",
                "to": "box",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 40,
        "wires": [[]]
    },
    {
        "id": "2e4c428a.5a76e6",
        "type": "function",
        "z": "e55eac88.70105",
        "name": "listening for buy events",
        "func": "const contract = global.get(\"contract\")\n\ntry {\ncontract && contract.on(\"Buy\", (buyer, fileId) => {\n    msg.event = `${ buyer } bought ${ fileId }`;\n    msg.buyer = buyer\n    msg.fileId = fileId\n    node.send(msg)\n});\n} catch (e) {\n    console.log(e)\n}\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 420,
        "wires": [["ed0a3204.00ce98", "4d111544.965c5c"]]
    },
    {
        "id": "d67c22c3.f5981",
        "type": "inject",
        "z": "e55eac88.70105",
        "name": "Set event listener",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "x": 170,
        "y": 420,
        "wires": [["2e4c428a.5a76e6"]]
    },
    {
        "id": "4d111544.965c5c",
        "type": "function",
        "z": "e55eac88.70105",
        "name": "get File details",
        "func": "const contract = global.get(\"contract\")\nconst file = await contract.Files(msg.fileId)\nmsg.file = `fileid ${msg.fileId} has a hash ${file.hash} and price ${file.price}`\n// msg.contract = global.get(\"contract\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 560,
        "wires": [["4499eadd.5f84a4"]]
    },
    {
        "id": "ed0a3204.00ce98",
        "type": "debug",
        "z": "e55eac88.70105",
        "name": "buy event",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "event",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 420,
        "wires": []
    },
    {
        "id": "4499eadd.5f84a4",
        "type": "debug",
        "z": "e55eac88.70105",
        "name": "file",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "file",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 560,
        "wires": []
    },
    {
        "id": "c8d16326.cefe9",
        "type": "json",
        "z": "e55eac88.70105",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 180,
        "wires": [["603a200f.e26b18"]]
    },
    {
        "id": "665b9531.5142f4",
        "type": "inject",
        "z": "e55eac88.70105",
        "name": "market abi",
        "props": [{ "p": "payload" }],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"filedId\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Files\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"orbitDb\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numRetriveals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fileCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hashExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orbitDb\",\"type\":\"string\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]}",
        "payloadType": "json",
        "x": 160,
        "y": 180,
        "wires": [["c8d16326.cefe9"]]
    },
    {
        "id": "603a200f.e26b18",
        "type": "change",
        "z": "e55eac88.70105",
        "name": "set abi",
        "rules": [
            {
                "t": "set",
                "p": "market_abi",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 180,
        "wires": [[]]
    },
    {
        "id": "147b4e06.43cf32",
        "type": "function",
        "z": "e55eac88.70105",
        "name": "setup 3box",
        "func": "async function getConsent({ type, origin, spaces }) {\n    return true;\n}\n\nconst IdentityWallet = global.get(\"IdentityWallet\");\nconst Box = global.get(\"Box\");\nconst authSecret = \"0x321abc123abc123abc123abc123abcde\"; // a hex encoded secret\n\nconst idWallet = new IdentityWallet(getConsent, { authSecret });\nconst threeIdProvider = idWallet.get3idProvider();\n\nawait idWallet.authenticate([\"ipfsethmarketplace\"]);\n\nconst box = await Box.openBox(null, threeIdProvider);\nmsg.box = box;\nawait box.syncDone;\nconst spaceName = \"ipfsethmarketplace\";\nconst space = await box.openSpace(spaceName);\nmsg.space = space;\nawait space.syncDone;\nconsole.log(\"space created & opened\")\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nconst box = msg.box;\nif (box) {\n    box.logout();\n}",
        "x": 430,
        "y": 100,
        "wires": [["267b2cf7.e997b4", "160112e0.026dbd"]]
    },
    {
        "id": "160112e0.026dbd",
        "type": "debug",
        "z": "e55eac88.70105",
        "name": "space DID",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "space.DID",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 140,
        "wires": []
    },
    {
        "id": "2d706ff9.1fe78",
        "type": "function",
        "z": "16ac6319.1ce66d",
        "name": "print members of thread",
        "func": "const space = global.get(\"space\");\n\nif (!space || !msg.thread) {\n    console.log(\"no space or no thread\")\n    return;\n}\nconsole.log(\"start space\");\nawait space.syncDone;\nconsole.log(\"end space\");\nconsole.log(\"try to join thread\");\nconst threadAddress = msg.thread;\nconst thread = await space.joinThreadByAddress(threadAddress).catch((error) =>\n{\n    console.log(\"could not join due to: \", error)\n});\nconsole.log(\"end join\");\nconst members = await thread.listMembers()\nconsole.log(members);\n// console.log(thread.address);\n// thread.onUpdate((posts) => {\n//     console.log(posts);\n// })\n// return msg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 320,
        "wires": [[]]
    },
    {
        "id": "aa303f24.2e2c",
        "type": "inject",
        "z": "16ac6319.1ce66d",
        "name": "",
        "props": [{ "p": "thread", "v": "", "vt": "str" }],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "x": 230,
        "y": 280,
        "wires": [["2d706ff9.1fe78", "11a6052e.ba86eb"]]
    },
    {
        "id": "11a6052e.ba86eb",
        "type": "debug",
        "z": "16ac6319.1ce66d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 220,
        "wires": []
    }
]
